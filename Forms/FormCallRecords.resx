<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAMDAAAAAAAACoDgAAFgAAACgAAAAwAAAAYAAAAAEACAAAAAAAgAoAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAALCwsADMzMwA6OjoAOzs7AD8/PwBDQ0MAR0dHAEpKSgBTU1MAVFRUAFlZWQBaWloAW1tbAGFh
        YQBkZGQAZWVlAGZmZgBnZ2cAaGhoAGpqagBra2sAbm5uAHJycgBzc3MAd3d3AHl5eQB7e3sAfHx8AH19
        fQACc6UABX6vAP8HzQAPh7cAGY+9ACSs1wAyrdUAKrjfACjA6gBxwdsAbNXxAH/l/wCAgIAAgoKCAISE
        hACFhYUAhoaGAImJiQCKiooAjIyMAI6OjgCPj48AkZGRAJSUlACWlpYAl5eXAJmZmQCbm5sAnJycAJ+f
        nwCgoKAAoqKiAKOjowCkpKQApaWlAKmpqQCrq6sAra2tAK6urgCysrIAs7OzALS0tAC1tbUAtra2ALe3
        twC4uLgAurq6AL29vQC/v78Au+XvAK/k8gDAwMAAwsLCAMTExADFxcUAxsbGAMnJyQDKysoAzMzMAM3N
        zQDR0dEA09PTANXV1QDW1tUA1tbWANfX1wDZ2dkA29vbAN3d3QDf398A2uvvANTu9QDN9/8A4eHhAOLi
        4gDl5eUA5ubmAOfn5wDp6ekA7OzsAO/v7wD+8+IA8vLyAPj4+AD///8AK+iAAFvmgAABAAAAAgAAAGDx
        EgBc8RIAdPMSAFIAAAAAAAAAQhMBAECS8QCkGNwAyPMSAKTzEgBcAHMAeQBzAHQAZQBtADMAMgBcAE0A
        cwC+lNQALbTUAP4RBQAgAAAArhIDAAEAAADY8RIAAAAUAFIAAAAAAAAAQhMBAECS8QDMGNwAHPQSAPjz
        EgD08xIAGO6QADgHkQD///8AMgeRAKsGkQDrBpEAAAAAACj3EgAA9xIABPcSAAEAAADZi9QAiADaAIzx
        EgBA8hIArNXUAFnV1ACo8hIAGFxAAAAAAAAAAAAAGFxAAAAAAAAQ8hIAAAAAAMTyEgBnBNcAYNXUAFZu
        8QBDb/EAURYBAA8AhQAAAAAAURYBAAAAAAABAAAAAAAAAHDyEgCqbvEAURYBAAAAAQDMGNwAMVFBAFEW
        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
        bEsvLy80Ew4TLzRFcQAAAAAAAAAAAAAAAAAAAAAA////////dxP///////8ANf+AAAAA/1qB/4AAAAD/
        AA//gAAAAP8AXP+AAAAA/3f6/4AAAAD/AAH///gP///AE///wD///9wA//+AB///ABP//wAB//8A2f//
        AAH//3/E//8AAf//d4T//wAB//93gf//AAH//wAs//8AAf//AAH//wAB//8AAP//AAH//wAA//8AAf//
        dwH//wAB//8AAP//AAH//wAq//8AAf//AGf//wAB//93////AAH//3eb//8AAf//ABP//wAB//8Agf//
        AAH//wAP//8AAf//AAH//wAB//8AGP//AAH//wD6//8AAf//AEj//wAB//93AP//AAH//wBI//8AAf//
        dwD//wAB//8A2v//AAH//wA8//8AAf//ACT//wAB//8AEP//AAH//3fg//8AAf///9r//wAB//92AP//
        AAH//wDw//8AAf//dtX//wAB//93iP//AAH//wCs//8AAf//AJj//wAB//9aCP//wAH/////
</value>
  </data>
</root>